(function(r,l){typeof exports=="object"&&typeof module!="undefined"?l(exports,require("lodash.get"),require("lodash.set")):typeof define=="function"&&define.amd?define(["exports","lodash.get","lodash.set"],l):(r=typeof globalThis!="undefined"?globalThis:r||self,l(r["vue-validate-form"]={},r.get,r.set))})(this,function(r,l,b){"use strict";function m(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var E=m(l),$=m(b);const p={};function D(e,t){p[e]=t}const u=Symbol("addField"),h=Symbol("removeField"),o=Symbol("updateField"),n=Symbol("getFieldRegistered"),f=Symbol("setValue"),F=Symbol("setFieldError"),V=Symbol("getFieldDefaultValues"),c=Symbol("getFieldValue"),y=Symbol("getFieldErrors"),g=Symbol("getFieldDirty"),v=Symbol("getFieldInvalid");var S=Object.freeze(Object.defineProperty({__proto__:null,addField:u,removeField:h,updateField:o,getFieldRegistered:n,setValue:f,setFieldError:F,getFieldDefaultValues:V,getFieldValue:c,getFieldErrors:y,getFieldDirty:g,getFieldInvalid:v},Symbol.toStringTag,{value:"Module"})),j={name:"ValidationProvider",provide(){return{[u]:this.addField,[o]:this.updateField,[h]:this.removeField,[n]:e=>!!this.fields[e],[f]:this.setValue,[F]:this.setError,[V]:this.getFieldDefaultValues,[c]:e=>this.flatValues[e],[y]:this.getFieldErrors,[g]:this.getFieldDirty,[v]:this.getFieldInvalid}},props:{defaultValues:{type:Object,default:()=>({})},resolver:{type:Function,default:null}},data(){return{submitted:!1,fields:{},flatValues:{},errors:{},dirtyFields:{},innerDefaultValues:{},defaultValuesByField:{}}},computed:{isDirty(){return!!Object.keys(this.dirtyFields).length},values(){return Object.entries(this.flatValues).reduce((e,[t,i])=>($.default(e,t,i),e),{})},firstInvalidField(){const e=Object.keys(this.fields).find(t=>this.errors[t].length);return this.fields[e]},existsErrors(){return Object.values(this.errors).some(e=>e.length)}},watch:{defaultValues:{immediate:!0,handler(e){this.reset(e)}},isDirty:{immediate:!0,handler(e){this.$emit("dirty",e)}}},methods:{async onSubmit(){this.submitted=!0;let e=this.values;if(Object.keys(this.errors).forEach(t=>{this.errors[t]=[]}),Object.keys(this.fields).forEach(t=>{this.validateField(t)}),this.resolver){const{values:t,errors:i}=await this.resolver(this.values);e=t,Object.entries(i).forEach(([s,{message:d,type:a}])=>{this.setError(s,a,d)})}if(this.existsErrors)return this.focusInvalidField();this.$emit("submit",e,{setError:this.setError,reset:this.reset,focusInvalidField:this.focusInvalidField})},focusInvalidField(){return this.firstInvalidField&&this.firstInvalidField.focus()},addField({name:e,rules:t,defaultValue:i,focus:s}){this.$set(this.fields,e,{rules:t,focus:s}),this.$set(this.defaultValuesByField,e,i),this.$set(this.flatValues,e,i),this.$set(this.errors,e,[]),this.$delete(this.dirtyFields,e)},updateField(e,{name:t,rules:i,focus:s}){this.$set(this.fields,e,{rules:i,focus:s}),this.replaceFieldName(e,t)},removeField(e){this.$delete(this.fields,e),this.$delete(this.defaultValuesByField,e),this.$delete(this.flatValues,e),this.$delete(this.errors,e),this.$set(this.dirtyFields,e,!0)},replaceFieldName(e,t){e!==t&&(this.$set(this.fields,t,this.fields[e]),this.$delete(this.fields,e),this.$set(this.dirtyFields,t,this.dirtyFields[e]),this.$delete(this.dirtyFields,e),this.$set(this.defaultValuesByField,t,this.defaultValuesByField[e]),this.$delete(this.defaultValuesByField,e),this.$set(this.flatValues,t,this.flatValues[e]),this.$delete(this.flatValues,e),this.$set(this.errors,t,this.errors[e]),this.$delete(this.errors,e))},async setValue(e,t){if(this.flatValues[e]===t||(this.flatValues[e]=t,t===this.defaultValuesByField[e]?this.$delete(this.dirtyFields,e):this.$set(this.dirtyFields,e,!0),!this.submitted)||(this.validateField(e),!this.resolver))return;const{errors:i}=await this.resolver(this.values);i[e]&&this.setError(e,i[e].type,i[e].message)},setError(e,t,i){this.errors[e]===void 0&&this.$set(this.errors,e,[]),this.errors[e].push({type:t,message:i})},validateField(e){this.errors[e]=[];const t=this.fields[e].rules,i=this.flatValues[e];Object.entries(t).forEach(([s,d])=>{const a=p[s];if(!a)throw new Error(`validator '${s}' must be registered`);a(i,d.params)||this.setError(e,s,d.message)})},getFieldDefaultValues(e,t){return E.default(this.innerDefaultValues,e,t)},getFieldErrors(e){return this.errors[e]||[]},getFieldDirty(e){return this.dirtyFields[e]},getFieldInvalid(e){return this.submitted&&!!this.getFieldErrors(e).length},reset(e){this.submitted=!1,e&&(this.innerDefaultValues=e),Object.entries(this.defaultValuesByField).forEach(([t,i])=>{const s=this.getFieldDefaultValues(t,i);this.defaultValuesByField[t]=s,this.setValue(t,s)})}},render(){return this.$scopedSlots.default({handleSubmit:this.onSubmit,reset:this.reset,setError:this.setError,setValue:this.setValue,values:this.values,isDirty:this.isDirty,invalid:this.submitted&&this.existsErrors,errors:this.errors,defaultValues:this.defaultValuesByField,dirtyFields:this.dirtyFields})}},O={name:"ValidationField",inject:{addField:u,removeField:h,updateField:o,getFieldRegistered:n,setValue:f,setFieldError:F,getFieldDefaultValues:V,getFieldValue:c,getFieldErrors:y,getFieldDirty:g,getFieldInvalid:v},model:{prop:"modelValue",event:"update:modelValue"},props:{name:{type:String,required:!0},modelValue:{type:null,default:void 0},rules:{type:Object,default:()=>({})}},computed:{isRegistered(){return this.getFieldRegistered(this.name)},providedDefaultValue(){return this.getFieldDefaultValues(this.name)},providedValue(){return this.getFieldValue(this.name)},defaultValue(){return this.providedDefaultValue!==void 0?this.providedDefaultValue:this.modelValue},dirty(){return this.getFieldDirty(this.name)},errors(){return this.getFieldErrors(this.name)},firstError(){return this.errors[0]||""},invalid(){return this.getFieldInvalid(this.name)},hasModelValue(){return this.modelValue!==void 0},computedModelValue(){return this.hasModelValue?this.modelValue:this.providedValue}},watch:{rules(e){this.updateField(this.name,{name:this.name,rules:e,focus:this.onFocus})},name(e,t){this.updateField(t,{name:e,rules:this.rules,focus:this.onFocus})},modelValue(e){this.setValue(this.name,e)},providedValue(e){this.onModelChange(e)}},mounted(){const e=this.defaultValue;this.addField({name:this.name,rules:this.rules,defaultValue:e,focus:this.onFocus}),e!==this.modelValue&&this.onModelChange(e)},beforeDestroy(){this.removeField(this.name)},methods:{onModelChange(e){this.$emit("update:modelValue",e),this.$nextTick(()=>{e=this.hasModelValue?this.computedModelValue:e,this.setValue(this.name,e)})},setError(e,t){this.setFieldError(this.name,e,t)},onFocus(){this.$emit("should-focus",{name:this.name,field:this})}},render(){if(!!this.isRegistered)return this.$scopedSlots.default({name:this.name,onChange:this.onModelChange,setError:this.setError,modelValue:this.computedModelValue,errors:this.errors,firstError:this.firstError,dirty:this.dirty,invalid:this.invalid})}};r.ValidationField=O,r.ValidationProvider=j,r.registerValidator=D,r.symbols=S,Object.defineProperties(r,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
