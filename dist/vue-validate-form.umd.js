(function(l,r){typeof exports=="object"&&typeof module!="undefined"?r(exports,require("lodash.get"),require("lodash.set")):typeof define=="function"&&define.amd?define(["exports","lodash.get","lodash.set"],r):(l=typeof globalThis!="undefined"?globalThis:l||self,r(l["vue-validate-form"]={},l.get,l.set))})(this,function(l,r,p){"use strict";function u(e){return e&&typeof e=="object"&&"default"in e?e:{default:e}}var b=u(r),E=u(p);const h={};function $(e,t){h[e]=t}const o=Symbol("addField"),n=Symbol("removeField"),f=Symbol("updateField"),F=Symbol("setValue"),V=Symbol("setFieldError"),c=Symbol("getFieldDefaultValues"),y=Symbol("getFieldValue"),v=Symbol("getFieldErrors"),g=Symbol("getFieldDirty"),m=Symbol("getFieldInvalid");var D={name:"ValidationProvider",provide(){return{[o]:this.addField,[f]:this.updateField,[n]:this.removeField,[F]:this.setValue,[V]:this.setError,[c]:this.getFieldDefaultValues,[y]:e=>this.flatValues[e],[v]:this.getFieldErrors,[g]:this.getFieldDirty,[m]:this.getFieldInvalid}},props:{defaultValues:{type:Object,default:()=>({})},resolver:{type:Function,default:null}},data(){return{submitted:!1,fields:{},flatValues:{},errors:{},dirtyFields:{},innerDefaultValues:{},defaultValuesByField:{}}},computed:{isDirty(){return!!Object.keys(this.dirtyFields).length},values(){return Object.entries(this.flatValues).reduce((e,[t,s])=>(E.default(e,t,s),e),{})},firstInvalidField(){const e=Object.keys(this.fields).find(t=>this.errors[t].length);return this.fields[e]},existsErrors(){return Object.values(this.errors).some(e=>e.length)}},watch:{defaultValues:{immediate:!0,handler(e){this.innerDefaultValues=e}}},methods:{async onSubmit(){this.submitted=!0;let e=this.values;if(Object.keys(this.errors).forEach(t=>{this.errors[t]=[]}),Object.keys(this.fields).forEach(t=>{this.validateField(t)}),this.resolver){const{values:t,errors:s}=await this.resolver(this.values);e=t,Object.entries(s).forEach(([i,{message:d,type:a}])=>{this.setError(i,a,d)})}if(this.existsErrors)return this.focusInvalidField();this.$emit("submit",e,{setError:this.setError,reset:this.reset,focusInvalidField:this.focusInvalidField})},focusInvalidField(){return this.firstInvalidField&&this.firstInvalidField.focus()},addField({name:e,rules:t,defaultValue:s,focus:i}){this.$set(this.fields,e,{rules:t,focus:i}),this.$set(this.defaultValuesByField,e,s),this.$set(this.flatValues,e,s),this.$set(this.errors,e,[]),this.$delete(this.dirtyFields,e)},updateField(e,{name:t,rules:s,focus:i}){this.$set(this.fields,e,{rules:s,focus:i}),this.replaceFieldName(e,t)},removeField(e){this.$delete(this.fields,e),this.$delete(this.defaultValuesByField,e),this.$delete(this.flatValues,e),this.$delete(this.errors,e),this.$set(this.dirtyFields,e,!0)},replaceFieldName(e,t){e!==t&&(this.$set(this.fields,t,this.fields[e]),this.$delete(this.fields,e),this.$set(this.dirtyFields,t,this.dirtyFields[e]),this.$delete(this.dirtyFields,e),this.$set(this.defaultValuesByField,t,this.defaultValuesByField[e]),this.$delete(this.defaultValuesByField,e),this.$set(this.flatValues,t,this.flatValues[e]),this.$delete(this.flatValues,e),this.$set(this.errors,t,this.errors[e]),this.$delete(this.errors,e))},async setValue(e,t){if(this.flatValues[e]===t||(this.flatValues[e]=t,t===this.defaultValuesByField[e]?this.$delete(this.dirtyFields,e):this.$set(this.dirtyFields,e,!0),this.validateField(e),!this.resolver))return;const{errors:s}=await this.resolver(this.values);s[e]&&this.setError(e,s[e].type,s[e].message)},setError(e,t,s){this.errors[e]===void 0&&this.$set(this.errors,e,[]),this.errors[e].push({type:t,message:s})},validateField(e){this.errors[e]=[];const t=this.fields[e].rules,s=this.flatValues[e];Object.entries(t).forEach(([i,d])=>{const a=h[i];if(!a)throw new Error(`validator '${i}' must be registered`);a(s,d.params)||this.setError(e,i,d.message)})},getFieldDefaultValues(e,t){return b.default(this.innerDefaultValues,e,t)},getFieldErrors(e){return this.errors[e]||[]},getFieldDirty(e){return this.dirtyFields[e]},getFieldInvalid(e){return this.submitted&&!!this.getFieldErrors(e).length},reset(e){this.submitted=!1,e&&(this.innerDefaultValues=e),Object.entries(this.defaultValuesByField).forEach(([t,s])=>{const i=this.getFieldDefaultValues(t,s);this.defaultValuesByField[t]=i,this.setValue(t,i)})}},render(){return this.$scopedSlots.default({handleSubmit:this.onSubmit,reset:this.reset,setError:this.setError,values:this.values,isDirty:this.isDirty,invalid:this.submitted&&this.existsErrors,errors:this.errors,defaultValues:this.defaultValuesByField,dirtyFields:this.dirtyFields})}},S={name:"ValidationField",inject:{addField:o,removeField:n,updateField:f,setValue:F,setFieldError:V,getFieldDefaultValues:c,getFieldValue:y,getFieldErrors:v,getFieldDirty:g,getFieldInvalid:m},model:{prop:"modelValue",event:"update:modelValue"},props:{name:{type:String,required:!0},modelValue:{type:null,default:void 0},rules:{type:Object,default:()=>({})}},computed:{providedDefaultValue(){return this.getFieldDefaultValues(this.name)},providedValue(){return this.getFieldValue(this.name)},defaultValue(){return this.providedDefaultValue!==void 0?this.providedDefaultValue:this.modelValue},dirty(){return this.getFieldDirty(this.name)},errors(){return this.getFieldErrors(this.name)},firstError(){return this.errors[0]||""},invalid(){return this.getFieldInvalid(this.name)},hasModelValue(){return this.modelValue!==void 0},computedModelValue(){return this.hasModelValue?this.modelValue:this.providedValue}},watch:{rules(e){this.updateField(this.name,{name:this.name,rules:e,focus:this.onFocus})},name(e,t){this.updateField(t,{name:e,rules:this.rules,focus:this.onFocus})},modelValue(e){this.setValue(this.name,e)},providedValue(e){this.onModelChange(e)}},mounted(){const e=this.defaultValue;this.addField({name:this.name,rules:this.rules,defaultValue:e,focus:this.onFocus}),e!==this.modelValue&&this.onModelChange(e)},beforeDestroy(){this.removeField(this.name)},methods:{onModelChange(e){this.$emit("update:modelValue",e),this.$nextTick(()=>{e=this.hasModelValue?this.computedModelValue:e,this.setValue(this.name,e)})},setError(e,t){this.setFieldError(this.name,e,t)},onFocus(){this.$emit("should-focus",{name:this.name,field:this})}},render(){return this.$scopedSlots.default({name:this.name,onChange:this.onModelChange,setError:this.setError,modelValue:this.computedModelValue,errors:this.errors,firstError:this.firstError,dirty:this.dirty,invalid:this.invalid})}};l.ValidationField=S,l.ValidationProvider=D,l.registerValidator=$,Object.defineProperties(l,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
